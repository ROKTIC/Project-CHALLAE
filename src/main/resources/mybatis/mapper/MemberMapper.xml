<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTO Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ezen.springmvc.domain.member.mapper.MemberMapper">

    <!-- 회원 등록 -->
    <insert id="create" parameterType="MemberDto">
        INSERT INTO MEMBER (MEMBER_NUM,
                            MEMBER_ID,
                            MEMBER_PASSWD,
                            MEMBER_NAME,
                            MEMBER_PHONE,
                            MEMBER_EMAIL,
                            MEMBER_PHOTO,
                            MEMBER_STOREDPHOTO)
        VALUES (NULL,  -- MySQL에서는 AUTO_INCREMENT 사용으로 NULL 값을 주어야 합니다.
                #{id},
                #{passwd},
                #{name},
                #{phone},
                #{email},
                #{profileImage},
                #{storedProfile})
    </insert>

    <!-- 아이디로 회원 상세 조회 -->
    <select id="findById" parameterType="string" resultType="MemberDto">
        SELECT MEMBER_ID AS "id"
        FROM MEMBER
        WHERE MEMBER_ID = #{id}
    </select>

    <!-- 회원 정보 수정 -->
    <update id="update" parameterType="com.ezen.springmvc.domain.member.dto.MemberDto">
        UPDATE MEMBER
        SET MEMBER_EMAIL  = #{email},
            MEMBER_PASSWD = #{passwd}
        WHERE MEMBER_ID = #{id}
    </update>

    <!-- 회원 전체 조회 -->
    <select id="findByAll" resultType="MemberDto">
        SELECT MEMBER_ID AS "id",
               MEMBER_NAME AS "name",
               MEMBER_EMAIL AS "email",
               DATE_FORMAT(REGDATE, '%Y-%m-%d %H:%i:%s') AS regdate
        FROM MEMBER
        ORDER BY REGDATE DESC
    </select>

    <!-- 회원 로그인 -->
    <select id="findByIdAndPasswd" resultType="MemberDto">
        SELECT m.MEMBER_ID          AS "id",
               m.MEMBER_NAME        AS "name",
               m.MEMBER_PHOTO       AS "profileImage",
               m.MEMBER_STOREDPHOTO AS "storedProfile",
               m.MEMBER_EMAIL       AS "email",
               m.CLUB_NUM           AS "clubNum",
               m.MEMBER_PASSWD      AS "passwd",
               m.MEMBER_DIR         AS "dir",
               m.MEMBER_NUM         AS "memberNum",
               c.CLUB_NAME          AS "clubName",
               c.STATUS             AS "status",
               m.MEMBER_PHONE       AS "phone"
        FROM MEMBER m
                 LEFT JOIN
             CLUB c ON m.CLUB_NUM = c.CLUB_NUM
        WHERE m.MEMBER_ID = #{id}
          AND m.MEMBER_PASSWD = #{passwd}
    </select>

    <!-- 회원 아이디 찾기 검색 -->
    <select id="findId" parameterType="string" resultType="MemberDto">
        SELECT MEMBER_ID AS "id"
        FROM MEMBER
        WHERE MEMBER_NAME = #{name}
          AND MEMBER_EMAIL = #{email}
    </select>

    <!-- 회원 비밀번호 찾기  -->
    <select id="findMemberByIdNameEmail" parameterType="map" resultType="MemberDto">
        SELECT MEMBER_ID AS "id", MEMBER_NAME AS "name", MEMBER_EMAIL AS "email"
        FROM MEMBER
        WHERE MEMBER_ID = #{id}
          AND MEMBER_NAME = #{name}
          AND MEMBER_EMAIL = #{email}
    </select>

    <!-- 임시 비밀번호 지정 -->
    <update id="updatePassword" parameterType="map">
        UPDATE MEMBER
        SET MEMBER_PASSWD = #{password}
        WHERE MEMBER_ID = #{id}
    </update>

    <!-- 전체 회원 수 출력 -->
    <select id="memberCount" resultType="int">
        SELECT COUNT(*) AS count
        FROM MEMBER
    </select>

    <!-- 전체 회원 목록 출력  -->
    <select id="viewAllMember" resultType="MemberDto">
        SELECT MEMBER_NUM,
               MEMBER_ID AS "id",
               MEMBER_DIR AS "dir",
               MEMBER_NAME AS "name",
               MEMBER_PHONE AS "phone",
               MEMBER_EMAIL AS "email",
               MEMBER_STOREDPHOTO AS "storedProfile",
               CLUB_NUM
        FROM MEMBER
    </select>

    <!-- 회원 강제 탈퇴  -->
    <delete id="deleteMember" parameterType="int">
        DELETE
        FROM MEMBER
        WHERE MEMBER_NUM = #{memberNum}
    </delete>

    <!-- 클럽 생성 이후 멤버 테이블의 DIR 수정 -->
    <update id="updateMemberWithClubInfo" parameterType="int">
        UPDATE MEMBER
        SET MEMBER_DIR = 'Y'
        WHERE MEMBER_NAME = (
            SELECT CLUB_PRESIDENT
            FROM CLUB
            WHERE CLUB_NUM = #{clubNum}
        )
    </update>

    <!-- 회원 아이디 또는 이름 회원 통합 검색 -->
    <select id="findBySearchAll" parameterType="string" resultType="MemberDto">
        SELECT MEMBER_ID AS "id", MEMBER_NAME AS "name", MEMBER_EMAIL AS "email", DATE_FORMAT(REGDATE, '%Y-%m-%d %H:%i:%s') AS regdate
        FROM MEMBER
        WHERE MEMBER_ID = #{value} OR MEMBER_NAME LIKE CONCAT('%', #{value}, '%')
    </select>

    <!-- 옵션 선택별 회원 통합 검색 -->
    <select id="findBySearchAllOption" parameterType="MemberSearchCondition" resultType="MemberDto">
        SELECT MEMBER_ID AS "id", MEMBER_NAME AS "name", MEMBER_EMAIL AS "email", DATE_FORMAT(REGDATE, '%Y-%m-%d %H:%i:%s') AS regdate
        FROM MEMBER
        <where>
            <if test="memberId != null and memberId != ''">
                OR MEMBER_ID = #{memberId}
            </if>
            <if test="name != null and name != ''">
                OR MEMBER_NAME LIKE CONCAT('%', #{name}, '%')
            </if>
            <if test="email != null and email != ''">
                OR MEMBER_EMAIL = #{email}
            </if>
        </where>
    </select>

    <!-- 내 팀보기) 팀별 회원목록 출력 [이름, 직책, 번호] / 직책과 이름순으로 정렬 -->
    <select id="myTeamList" resultType="MemberDto">
        SELECT MEMBER_NUM, MEMBER_NAME AS "name", MEMBER_DIR AS "dir", MEMBER_PHONE AS "phone", CLUB_NUM
        FROM (
        SELECT
        CEIL(ROW_NUMBER() OVER (ORDER BY
        CASE
        WHEN MEMBER_DIR = 'Y' THEN 0
        ELSE 1
        END,
        MEMBER_NAME ASC) / #{searchDto.limit}) AS page,
        MEMBER_NUM,
        MEMBER_NAME,
        MEMBER_DIR,
        MEMBER_PHONE,
        CLUB_NUM
        FROM MEMBER
        WHERE CLUB_NUM = #{clubNum}
        <if test="searchDto.searchValue != null">
            AND MEMBER_NAME LIKE CONCAT('%', #{searchDto.searchValue}, '%')
        </if>
        ) AS main
        WHERE page = #{searchDto.page}
    </select>


    <!-- 클럽원 갯수 반환 (페이지네이션을 위함) -->
    <select id="countMyTeamList" resultType="int">
        SELECT COUNT(MEMBER_ID) AS "clubMembercount"
        FROM MEMBER
        <where>
            CLUB_NUM = #{clubNum}
            <if test="searchDto.searchValue != null">
                AND MEMBER_NAME LIKE CONCAT('%', #{searchDto.searchValue}, '%')
            </if>
        </where>
    </select>

    <!-- 클럽 생성 이후 멤버 테이블의 CLUB_NUM 수정 -->
    <update id="updateClubNumByPresident" parameterType="int">
        UPDATE MEMBER m
        SET m.CLUB_NUM = (
            SELECT c.CLUB_NUM
            FROM (
                     SELECT c.CLUB_NUM, c.CLUB_PRESIDENT,
                            ROW_NUMBER() OVER (PARTITION BY c.CLUB_PRESIDENT ORDER BY c.CLUB_NUM) AS rn
                     FROM CLUB c
                 ) AS c
            WHERE c.CLUB_PRESIDENT = m.MEMBER_NAME AND c.rn = 1
        )
        WHERE m.MEMBER_NAME IN (
            SELECT c.CLUB_PRESIDENT
            FROM CLUB c
            WHERE c.CLUB_NUM = #{clubNum}
        )
    </update>

    <!-- 클럽원 강퇴 -->
    <update id="ClubMemberDelete" parameterType="MemberDto">
        UPDATE MEMBER
        SET CLUB_NUM = NULL
        WHERE MEMBER_NUM = #{memberNum}
    </update>

    <!-- 클럽 상세 페이지 멤버 목록 / club_detail 페이지 -->
    <select id="clubMemberList" resultType="MemberDto">
        SELECT CLUB_NUM, MEMBER_NUM, MEMBER_STOREDPHOTO AS "storedProfile", MEMBER_NAME AS "name",
               (CASE WHEN MEMBER_DIR = 'Y' THEN '클럽장' ELSE '클럽원' END) AS "dir"
        FROM MEMBER
        WHERE CLUB_NUM = #{clubNum}
        ORDER BY MEMBER_DIR DESC
    </select>

    <!-- 클럽 가입 승인(clubNum 업데이트) / club_join -->
    <update id="clubJoinUpdateClubNum" parameterType="int">
        UPDATE MEMBER
        SET CLUB_NUM = (
            SELECT CLUB_NUM
            FROM CLUBJOINLIST
            WHERE JOIN_NUM = #{joinNum}
        )
        WHERE MEMBER_NUM = (
            SELECT MEMBER_NUM
            FROM CLUBJOINLIST
            WHERE JOIN_NUM = #{joinNum}
        )
    </update>

</mapper>
